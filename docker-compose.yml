version: '3.7'

volumes:
  prometheus_data: {}
  elasticsearch:
  grafana_storage: {}

networks:
  monitoring:
    driver: bridge

services:
  consul:
    image: consul:1.15
    ports:
      - 8400:8400
      - 8500:8500
      - 8600:53/udp
    command: agent -server -client=0.0.0.0 -dev -node=node0 -bootstrap-expect=1 -data-dir=/tmp/consul
    labels:
      SERVICE_IGNORE: 'true'
    networks:
      - monitoring

  registrator:
    image: gliderlabs/registrator
    depends_on:
      - consul
    volumes:
      - /var/run:/tmp:rw
    command: consul://consul:8500
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml/:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - "9090:9090"
    networks:
      - monitoring

  alertmanager:
    image: quay.io/prometheus/alertmanager
    container_name: alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9093:9093"
    volumes:
      - ./prometheus/alertmanager:/etc/alertmanager
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      #- E:\Tinkoff\SRE\prometheus-sre-v2\textfile_collector:/var/lib/textfile_collector
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      #- '--collector.disable-defaults'
      #- '--collector.cpu'
      #- '--collector.diskstats'
      #- '--collector.meminfo'
      #- '--collector.textfile'
      #- '--collector.textfile.directory=/var/lib/textfile_collector'
    expose:
      - 9100
    ports:
      - "9100:9100"
    networks:
      - monitoring

  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - monitoring

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx-exporter
    restart: unless-stopped
    environment:
      - SCRAPE_URI=http://nginx/nginx_status
      - TELEMETRY_PATH=/metrics
      - NGINX_RETRIES=10
    ports:
      - "9113:9113"
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "5m"

  oncall-mysql:
    hostname: oncall-mysql
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_LOG_CONSOLE=true
    networks:
      - monitoring

  oncall-web:
    image: denuar/oncall:0.5
    hostname: oncall-web
    environment:
      - DOCKER_DB_BOOTSTRAP=1
      - IRIS_API_HOST=iris
    expose:
      - 8080
      - 8001c
      - 8002
    volumes:
      - ./configs/config.docker.yaml:/home/oncall/config/config.yaml
    networks:
      - monitoring

  new-oncall:
    image: denuar/oncall:1.0
    hostname: new-oncall
    environment:
      - DOCKER_DB_BOOTSTRAP=1
      - IRIS_API_HOST=iris
    expose:
      - 8080
      - 8001
      - 8002
    volumes:
      - ./configs/config.docker.yaml:/home/oncall/config/config.yaml
    networks:
      - monitoring

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    volumes:
      - ./blackbox-exporter/:/config/
    command:
      - '--config.file=/config/blackbox.yml'
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - monitoring
    logging:
        driver: "json-file"
        options:
          max-size: "5m"

  custom-exporter:
    container_name: custom-exporter
    build:
      context: .
      dockerfile: custom_exporter/Dockerfile
    depends_on:
      - consul
    ports:
      - "8008:8008"
    networks:
      - monitoring

  elasticsearch:
     container_name: elasticsearch
     build:
       context: ./elk/elasticsearch
     volumes:
       - type: volume
         source: elasticsearch
         target: /usr/share/elasticsearch/data
     ports:
       - "9200:9200"
       - "9300:9300"
     environment:
       ES_JAVA_OPTS: "-Xmx256m -Xms256m"
       ELASTIC_PASSWORD: yourstrongpasswordhere
       discovery.type: single-node
     networks:
       - monitoring

  logstash:
     container_name: logstash
     build:
       context: ./elk/logstash
     ports:
       - "5000:5000"
       - "9600:9600"
     environment:
       LS_JAVA_OPTS: "-Xmx256m -Xms256m"
     networks:
       - monitoring
     depends_on:
       - elasticsearch

  kibana:
     container_name: kibana
     build:
       context: ./elk/kibana
     ports:
       - "5601:5601"
     networks:
       - monitoring
     depends_on:
       - elasticsearch

  filebeat:
    container_name: filebeat
    build:
      context: ./elk/filebeat
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring
    depends_on:
      - logstash

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SERVER_ROOT_URL=http://my.grafana.server/
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    ports:
      - '3000:3000'
    volumes:
      - 'grafana_storage:/var/lib/grafana'
    networks:
      - monitoring



